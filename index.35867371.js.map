{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCKA,IAAM,EAAY,SAAS,aAAa,CAAC,eAAe,OAAO,CAAC,EAAE,CAC5D,EAAQ,EAAG,EAAU,QAAQ,EAC7B,EAAS,EAAG,EAAU,gBAAgB,CAAC,gBACvC,EAAa,SAAS,aAAa,CAAC,eACpC,EAAY,SAAS,aAAa,CAAC,cACnC,EAAQ,EAAE,CAEZ,EAAqB,CAAA,EACrB,EAAQ,EACR,EAAO,aAAa,OAAO,CAAC,SAAW,EAEvC,EAAc,KACd,EAAc,KACd,EAAQ,EAgCZ,SAAS,IACP,OAAO,EAAK,GAAG,CAAC,SAAC,CAAjB,EAA0B,OAAA,EAAG,EAAI,QAAQ,C,EAC3C,CA4DA,SAAS,IACP,OAAO,EAAM,MAAM,CAAC,SAAC,CAArB,EAA8B,MAAA,AAAqB,MAArB,EAAK,OAAO,CAAC,GAAG,A,EAChD,CASA,SAAS,IACP,IAPM,EAOA,EANY,CADZ,EAAa,IACS,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,CAOrE,EAAK,EAAU,OAAO,CAAC,EAAE,AAE/B,CAAA,EAAU,OAAO,CAAC,GAAG,CAAG,KAAK,MAAM,IAAM,GAAM,EAAI,EACnD,CAAK,CAAC,EAAG,CAAC,WAAW,CAAG,EAAU,OAAO,CAAC,GAAG,CAC7C,CAAK,CAAC,EAAG,CAAC,SAAS,CAAC,GAAG,CAAC,SAA+B,MAAA,CAAtB,EAAU,OAAO,CAAC,GAAG,GACtD,CAAK,CAAC,EAAG,CAAC,SAAS,CAAC,GAAG,CAAC,aAExB,WAAW,WAAM,OAAA,CAAK,CAAC,EAAG,C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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar COLUMN_LENGTH = 4;\nvar WIN_VALUE = 2048;\nvar gameField = document.querySelector(\".game-field\").tBodies[0];\nvar rows = _to_consumable_array(gameField.children);\nvar cells = _to_consumable_array(gameField.querySelectorAll(\".field-cell\"));\nvar scoreBlock = document.querySelector(\".game-score\");\nvar bestBlock = document.querySelector(\".game-best\");\nvar tiles = [];\nvar wasAnyCellReplaced = false;\nvar score = 0;\nvar best = localStorage.getItem(\"best\") || 0;\nvar xStartPoint = null;\nvar yStartPoint = null;\nvar lastY = 1;\nfunction isPossibleToMove() {\n    if (getEmptyCells().length > 0) return true;\n    for(var i = 0; i < rows.length; i++)for(var j = 0; j < rows.length; j++){\n        var currentCellValue = rows[i].children[j].dataset.num;\n        if (j !== rows.length - 1) {\n            var rightCellValue = rows[i].children[j + 1].dataset.num;\n            if (currentCellValue === rightCellValue) return true;\n        }\n        if (i !== rows.length - 1) {\n            var bottomCellValue = rows[i + 1].children[j].dataset.num;\n            if (currentCellValue === bottomCellValue) return true;\n        }\n    }\n    return false;\n}\nfunction getCellsByRows() {\n    return rows.map(function(row) {\n        return _to_consumable_array(row.children);\n    });\n}\nfunction getCellsByRowsReversed() {\n    return getCellsByRows().map(function(row) {\n        return row.reverse();\n    });\n}\nfunction getCellsByColumns() {\n    var columns = [];\n    for(var i = 0; i < COLUMN_LENGTH; i++){\n        var column = [];\n        for(var j = 0; j < rows.length; j++)column.push(rows[j].children[i]);\n        columns.push(column);\n    }\n    return columns;\n}\nfunction getCellsByReversedColumns() {\n    var columns = [];\n    for(var i = 0; i < COLUMN_LENGTH; i++){\n        var column = [];\n        for(var j = 0; j < rows.length; j++)column.push(rows[rows.length - j - 1].children[i]);\n        columns.push(column);\n    }\n    return columns;\n}\nfunction createTile(cell) {\n    var tile = document.createElement(\"div\");\n    tile.classList.add(\"tile\");\n    tile.style.top = cell.offsetTop + \"px\";\n    tile.style.left = cell.offsetLeft + \"px\";\n    gameField.append(tile);\n    return tile;\n}\nfunction initTilesAndCells() {\n    for(var i = 0; i < cells.length; i++)tiles.push(createTile(cells[i]));\n    for(var i1 = 0; i1 < cells.length; i1++){\n        cells[i1].dataset.id = i1;\n        cells[i1].dataset.num = 0;\n    }\n}\nfunction getEmptyCells() {\n    return cells.filter(function(cell) {\n        return cell.dataset.num === \"0\";\n    });\n}\nfunction getRandomEmptyCell() {\n    var emptyCells = getEmptyCells();\n    var emptyCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    return emptyCell;\n}\nfunction makeNewCell() {\n    var emptyCell = getRandomEmptyCell();\n    var id = emptyCell.dataset.id;\n    emptyCell.dataset.num = Math.random() >= 0.9 ? 4 : 2;\n    tiles[id].textContent = emptyCell.dataset.num;\n    tiles[id].classList.add(\"tile--\".concat(emptyCell.dataset.num));\n    tiles[id].classList.add(\"anim-show\");\n    setTimeout(function() {\n        return tiles[id].classList.remove(\"anim-show\");\n    }, 500);\n}\nfunction replaceEmptyCells(arrOfCells) {\n    var isSorted = false;\n    do {\n        isSorted = true;\n        for(var k = 0; k < arrOfCells.length; k++){\n            if (k === arrOfCells.length - 1) break;\n            if (arrOfCells[k].dataset.num !== \"0\" && arrOfCells[k + 1].dataset.num === \"0\") {\n                arrOfCells[k + 1].dataset.num = arrOfCells[k].dataset.num;\n                arrOfCells[k].dataset.num = 0;\n                var ref;\n                ref = [\n                    arrOfCells[k].dataset.id,\n                    arrOfCells[k + 1].dataset.id\n                ], arrOfCells[k + 1].dataset.id = ref[0], arrOfCells[k].dataset.id = ref[1], ref;\n                wasAnyCellReplaced = true;\n                isSorted = false;\n            }\n        }\n    }while (!isSorted);\n}\nfunction slide(groupedCells) {\n    var _loop = function(i) {\n        var _loop = function(k) {\n            if (k === cellsGroup.length - 1) return \"break\";\n            if (cellsGroup[k].dataset.num === cellsGroup[k + 1].dataset.num && cellsGroup[k].dataset.num !== \"0\") {\n                var cellToRemove = cellsGroup[k];\n                var cellToDouble = cellsGroup[k + 1];\n                var tileToRemove = tiles[cellToRemove.dataset.id];\n                var tileToDouble = tiles[cellToDouble.dataset.id];\n                var newNumber = cellToDouble.dataset.num * 2;\n                tileToRemove.classList.remove(\"tile--\".concat(cellToRemove.dataset.num));\n                tileToRemove.textContent = \"\";\n                cellToRemove.dataset.num = 0;\n                tileToDouble.classList.remove(\"tile--\".concat(cellToDouble.dataset.num));\n                cellToDouble.dataset.num = newNumber;\n                tileToDouble.textContent = newNumber;\n                tileToDouble.classList.add(\"tile--\".concat(newNumber));\n                tileToDouble.classList.add(\"anim-merge\");\n                setTimeout(function() {\n                    return tileToDouble.classList.remove(\"anim-merge\");\n                }, 500);\n                wasAnyCellReplaced = true;\n                score += newNumber;\n                if (newNumber === WIN_VALUE) document.querySelector(\".message-win\").classList.remove(\"hidden\");\n                replaceEmptyCells(cellsGroup);\n            }\n        };\n        var cellsGroup = groupedCells[i];\n        replaceEmptyCells(cellsGroup);\n        for(var k = 2; k >= 0; k--){\n            var _ret = _loop(k);\n            if (_ret === \"break\") break;\n        }\n    };\n    for(var i = 0; i < groupedCells.length; i++)_loop(i);\n    cells.forEach(function(cell) {\n        tiles[cell.dataset.id].style.top = cell.offsetTop + \"px\";\n        tiles[cell.dataset.id].style.left = cell.offsetLeft + \"px\";\n    });\n}\nfunction slideUp() {\n    var cellsArr = getCellsByReversedColumns();\n    slide(cellsArr);\n    if (wasAnyCellReplaced) {\n        makeNewCell();\n        wasAnyCellReplaced = false;\n    }\n}\nfunction slideDown() {\n    var cellsArr = getCellsByColumns();\n    slide(cellsArr);\n    if (wasAnyCellReplaced) {\n        makeNewCell();\n        wasAnyCellReplaced = false;\n    }\n}\nfunction slideRight() {\n    var cellsArr = getCellsByRows();\n    slide(cellsArr);\n    if (wasAnyCellReplaced) {\n        makeNewCell();\n        wasAnyCellReplaced = false;\n    }\n}\nfunction slideLeft() {\n    var cellsArr = getCellsByRowsReversed();\n    slide(cellsArr);\n    if (wasAnyCellReplaced) {\n        makeNewCell();\n        wasAnyCellReplaced = false;\n    }\n}\nfunction endMove() {\n    if (score > best) {\n        localStorage.setItem(\"best\", score);\n        best = score;\n    }\n    scoreBlock.textContent = score;\n    bestBlock.textContent = best;\n    if (!isPossibleToMove()) document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\nfunction handleButtonClick(e) {\n    e.target.textContent = \"Restart\";\n    e.target.classList.remove(\"start\");\n    e.target.classList.add(\"restart\");\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    cells.forEach(function(cell) {\n        tiles[cell.dataset.id].textContent = \"\";\n        tiles[cell.dataset.id].classList.remove(\"tile--\".concat(cell.dataset.num));\n        cell.dataset.num = 0;\n    });\n    score = 0;\n    document.querySelector(\".game-score\").textContent = 0;\n    makeNewCell();\n    makeNewCell();\n}\nfunction handleInput(e) {\n    switch(e.key){\n        case \"ArrowUp\":\n            slideUp();\n            break;\n        case \"ArrowDown\":\n            slideDown();\n            break;\n        case \"ArrowRight\":\n            slideRight();\n            break;\n        case \"ArrowLeft\":\n            slideLeft();\n            break;\n    }\n    endMove();\n}\nfunction handleTouchStart(e) {\n    var firstTouch = e.touches[0];\n    xStartPoint = firstTouch.clientX;\n    yStartPoint = firstTouch.clientY;\n}\nfunction handleTouchMove(e) {\n    if (!xStartPoint || !yStartPoint) // eslint-disable-next-line no-useless-return\n    return;\n    var xEndPoint = e.touches[0].clientX;\n    var yEndPoint = e.touches[0].clientY;\n    var xDiff = xEndPoint - xStartPoint;\n    var yDiff = yEndPoint - yStartPoint;\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n        if (xDiff > 0) slideRight();\n        else slideLeft();\n    } else if (yDiff > 0) slideDown();\n    else slideUp();\n    xStartPoint = null;\n    yStartPoint = null;\n    endMove();\n}\nfunction disableScrollReload(e) {\n    var lastS = document.documentElement.scrollTop;\n    if (lastS === 0 && lastY - e.touches[0].clientY < 0 && e.cancelable) {\n        e.preDefault();\n        e.stopPropagation();\n    }\n    lastY = e.touches[0].clientY;\n}\nbestBlock.textContent = best;\ninitTilesAndCells();\ndocument.querySelector(\".button\").addEventListener(\"click\", handleButtonClick);\ndocument.addEventListener(\"keyup\", handleInput);\ngameField.addEventListener(\"touchstart\", handleTouchStart, false);\ngameField.addEventListener(\"touchmove\", handleTouchMove, false);\ndocument.addEventListener(\"touchmove\", disableScrollReload, {\n    passive: false\n});\n\n//# sourceMappingURL=index.35867371.js.map\n","'use strict';\n\nconst COLUMN_LENGTH = 4;\nconst WIN_VALUE = 2048;\n\nconst gameField = document.querySelector('.game-field').tBodies[0];\nconst rows = [...gameField.children];\nconst cells = [...gameField.querySelectorAll('.field-cell')];\nconst scoreBlock = document.querySelector('.game-score');\nconst bestBlock = document.querySelector('.game-best');\nconst tiles = [];\n\nlet wasAnyCellReplaced = false;\nlet score = 0;\nlet best = localStorage.getItem('best') || 0;\n\nlet xStartPoint = null;\nlet yStartPoint = null;\nlet lastY = 1;\n\nfunction isPossibleToMove() {\n  if (getEmptyCells().length > 0) {\n    return true;\n  }\n\n  for (let i = 0; i < rows.length; i++) {\n    for (let j = 0; j < rows.length; j++) {\n      const currentCellValue = rows[i].children[j].dataset.num;\n\n      if (j !== rows.length - 1) {\n        const rightCellValue = rows[i].children[j + 1].dataset.num;\n\n        if (currentCellValue === rightCellValue) {\n          return true;\n        }\n      }\n\n      if (i !== rows.length - 1) {\n        const bottomCellValue = rows[i + 1].children[j].dataset.num;\n\n        if (currentCellValue === bottomCellValue) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction getCellsByRows() {\n  return rows.map((row) => [...row.children]);\n}\n\nfunction getCellsByRowsReversed() {\n  return getCellsByRows().map((row) => row.reverse());\n}\n\nfunction getCellsByColumns() {\n  const columns = [];\n\n  for (let i = 0; i < COLUMN_LENGTH; i++) {\n    const column = [];\n\n    for (let j = 0; j < rows.length; j++) {\n      column.push(rows[j].children[i]);\n    }\n\n    columns.push(column);\n  }\n\n  return columns;\n}\n\nfunction getCellsByReversedColumns() {\n  const columns = [];\n\n  for (let i = 0; i < COLUMN_LENGTH; i++) {\n    const column = [];\n\n    for (let j = 0; j < rows.length; j++) {\n      column.push(rows[rows.length - j - 1].children[i]);\n    }\n\n    columns.push(column);\n  }\n\n  return columns;\n}\n\nfunction createTile(cell) {\n  const tile = document.createElement('div');\n\n  tile.classList.add('tile');\n  tile.style.top = cell.offsetTop + 'px';\n  tile.style.left = cell.offsetLeft + 'px';\n  gameField.append(tile);\n\n  return tile;\n}\n\nfunction initTilesAndCells() {\n  for (let i = 0; i < cells.length; i++) {\n    tiles.push(createTile(cells[i]));\n  }\n\n  for (let i = 0; i < cells.length; i++) {\n    cells[i].dataset.id = i;\n    cells[i].dataset.num = 0;\n  }\n}\n\nfunction getEmptyCells() {\n  return cells.filter((cell) => cell.dataset.num === '0');\n}\n\nfunction getRandomEmptyCell() {\n  const emptyCells = getEmptyCells();\n  const emptyCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n  return emptyCell;\n}\n\nfunction makeNewCell() {\n  const emptyCell = getRandomEmptyCell();\n  const id = emptyCell.dataset.id;\n\n  emptyCell.dataset.num = Math.random() >= 0.9 ? 4 : 2;\n  tiles[id].textContent = emptyCell.dataset.num;\n  tiles[id].classList.add(`tile--${emptyCell.dataset.num}`);\n  tiles[id].classList.add('anim-show');\n\n  setTimeout(() => tiles[id].classList.remove('anim-show'), 500);\n}\n\nfunction replaceEmptyCells(arrOfCells) {\n  let isSorted = false;\n\n  do {\n    isSorted = true;\n\n    for (let k = 0; k < arrOfCells.length; k++) {\n      if (k === arrOfCells.length - 1) {\n        break;\n      }\n\n      if (\n        arrOfCells[k].dataset.num !== '0' &&\n        arrOfCells[k + 1].dataset.num === '0'\n      ) {\n        arrOfCells[k + 1].dataset.num = arrOfCells[k].dataset.num;\n        arrOfCells[k].dataset.num = 0;\n\n        [arrOfCells[k + 1].dataset.id, arrOfCells[k].dataset.id] = [\n          arrOfCells[k].dataset.id,\n          arrOfCells[k + 1].dataset.id,\n        ];\n\n        wasAnyCellReplaced = true;\n\n        isSorted = false;\n      }\n    }\n  } while (!isSorted);\n}\n\nfunction slide(groupedCells) {\n  for (let i = 0; i < groupedCells.length; i++) {\n    const cellsGroup = groupedCells[i];\n\n    replaceEmptyCells(cellsGroup);\n\n    for (let k = 2; k >= 0; k--) {\n      if (k === cellsGroup.length - 1) {\n        break;\n      }\n\n      if (\n        cellsGroup[k].dataset.num === cellsGroup[k + 1].dataset.num &&\n        cellsGroup[k].dataset.num !== '0'\n      ) {\n        const cellToRemove = cellsGroup[k];\n        const cellToDouble = cellsGroup[k + 1];\n        const tileToRemove = tiles[cellToRemove.dataset.id];\n        const tileToDouble = tiles[cellToDouble.dataset.id];\n        const newNumber = cellToDouble.dataset.num * 2;\n\n        tileToRemove.classList.remove(`tile--${cellToRemove.dataset.num}`);\n        tileToRemove.textContent = '';\n        cellToRemove.dataset.num = 0;\n\n        tileToDouble.classList.remove(`tile--${cellToDouble.dataset.num}`);\n        cellToDouble.dataset.num = newNumber;\n        tileToDouble.textContent = newNumber;\n        tileToDouble.classList.add(`tile--${newNumber}`);\n        tileToDouble.classList.add(`anim-merge`);\n\n        setTimeout(() => tileToDouble.classList.remove(`anim-merge`), 500);\n\n        wasAnyCellReplaced = true;\n        score += newNumber;\n\n        if (newNumber === WIN_VALUE) {\n          document.querySelector('.message-win').classList.remove('hidden');\n        }\n\n        replaceEmptyCells(cellsGroup);\n      }\n    }\n  }\n\n  cells.forEach((cell) => {\n    tiles[cell.dataset.id].style.top = cell.offsetTop + 'px';\n    tiles[cell.dataset.id].style.left = cell.offsetLeft + 'px';\n  });\n}\n\nfunction slideUp() {\n  const cellsArr = getCellsByReversedColumns();\n\n  slide(cellsArr);\n\n  if (wasAnyCellReplaced) {\n    makeNewCell();\n\n    wasAnyCellReplaced = false;\n  }\n}\n\nfunction slideDown() {\n  const cellsArr = getCellsByColumns();\n\n  slide(cellsArr);\n\n  if (wasAnyCellReplaced) {\n    makeNewCell();\n\n    wasAnyCellReplaced = false;\n  }\n}\n\nfunction slideRight() {\n  const cellsArr = getCellsByRows();\n\n  slide(cellsArr);\n\n  if (wasAnyCellReplaced) {\n    makeNewCell();\n\n    wasAnyCellReplaced = false;\n  }\n}\n\nfunction slideLeft() {\n  const cellsArr = getCellsByRowsReversed();\n\n  slide(cellsArr);\n\n  if (wasAnyCellReplaced) {\n    makeNewCell();\n\n    wasAnyCellReplaced = false;\n  }\n}\n\nfunction endMove() {\n  if (score > best) {\n    localStorage.setItem('best', score);\n\n    best = score;\n  }\n\n  scoreBlock.textContent = score;\n  bestBlock.textContent = best;\n\n  if (!isPossibleToMove()) {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\nfunction handleButtonClick(e) {\n  e.target.textContent = 'Restart';\n  e.target.classList.remove('start');\n  e.target.classList.add('restart');\n\n  document.querySelector('.message-start').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n\n  cells.forEach((cell) => {\n    tiles[cell.dataset.id].textContent = '';\n    tiles[cell.dataset.id].classList.remove(`tile--${cell.dataset.num}`);\n    cell.dataset.num = 0;\n  });\n\n  score = 0;\n\n  document.querySelector('.game-score').textContent = 0;\n\n  makeNewCell();\n  makeNewCell();\n}\n\nfunction handleInput(e) {\n  switch (e.key) {\n    case 'ArrowUp':\n      slideUp();\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      break;\n\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n  }\n\n  endMove();\n}\n\nfunction handleTouchStart(e) {\n  const firstTouch = e.touches[0];\n\n  xStartPoint = firstTouch.clientX;\n  yStartPoint = firstTouch.clientY;\n}\n\nfunction handleTouchMove(e) {\n  if (!xStartPoint || !yStartPoint) {\n    // eslint-disable-next-line no-useless-return\n    return;\n  }\n\n  const xEndPoint = e.touches[0].clientX;\n  const yEndPoint = e.touches[0].clientY;\n\n  const xDiff = xEndPoint - xStartPoint;\n  const yDiff = yEndPoint - yStartPoint;\n\n  if (Math.abs(xDiff) > Math.abs(yDiff)) {\n    if (xDiff > 0) {\n      slideRight();\n    } else {\n      slideLeft();\n    }\n  } else {\n    if (yDiff > 0) {\n      slideDown();\n    } else {\n      slideUp();\n    }\n  }\n\n  xStartPoint = null;\n  yStartPoint = null;\n\n  endMove();\n}\n\nfunction disableScrollReload(e) {\n  const lastS = document.documentElement.scrollTop;\n\n  if (lastS === 0 && lastY - e.touches[0].clientY < 0 && e.cancelable) {\n    e.preDefault();\n    e.stopPropagation();\n  }\n\n  lastY = e.touches[0].clientY;\n}\n\nbestBlock.textContent = best;\n\ninitTilesAndCells();\n\ndocument.querySelector('.button').addEventListener('click', handleButtonClick);\ndocument.addEventListener('keyup', handleInput);\ngameField.addEventListener('touchstart', handleTouchStart, false);\ngameField.addEventListener('touchmove', handleTouchMove, false);\ndocument.addEventListener('touchmove', disableScrollReload, { passive: false });\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","gameField","document","querySelector","tBodies","rows","children","cells","querySelectorAll","scoreBlock","bestBlock","tiles","wasAnyCellReplaced","score","best","localStorage","getItem","xStartPoint","yStartPoint","lastY","getCellsByRows","map","row","getEmptyCells","filter","cell","dataset","num","makeNewCell","emptyCells","emptyCell","Math","floor","random","id","textContent","classList","add","concat","setTimeout","remove","replaceEmptyCells","arrOfCells","isSorted","ref","k","slide","groupedCells","_loop","cellsGroup","_ret","cellToRemove","cellToDouble","tileToRemove","tileToDouble","newNumber","forEach","style","top","offsetTop","left","offsetLeft","slideUp","getCellsByReversedColumns","columns","column","j","push","slideDown","getCellsByColumns","slideRight","slideLeft","reverse","endMove","setItem","isPossibleToMove","currentCellValue","initTilesAndCells","createTile","tile","createElement","append","i1","addEventListener","e","target","key","firstTouch","touches","clientX","clientY","xEndPoint","yEndPoint","xDiff","yDiff","abs","documentElement","scrollTop","cancelable","preDefault","stopPropagation","passive"],"version":3,"file":"index.35867371.js.map"}